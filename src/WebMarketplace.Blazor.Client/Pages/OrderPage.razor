@page "/order"
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.PageToolbars
@using WebMarketplace.Addresses
@using WebMarketplace.Carts
@using WebMarketplace.Localization
@using WebMarketplace.Orders
@using WebMarketplace.Users.UserAddresses
@inherits WmPageBase
@inject IStringLocalizer<WebMarketplaceResource> L
@inject ICartAppService CartAppService
@inject IOrderBuyerAppService OrderAppService
@inject IUiMessageService UiMessageService
@inject NavigationManager NavigationManager
@inject IUserAddressAppService UserAddressAppService

<WmPageHeader Toolbar="@PageToolbar" BreadcrumbItems="@BreadcrumbItems" Header="@PageHeader" Title="@PageTitle"/>

@foreach (var order in Orders)
{
    <WmCreateOrder Order="@order"/>
}

<Card>
    <CardBody>
        <Div Flex="Flex.JustifyContent.Between"
             Margin="Margin.Is3.FromBottom">
            <Heading Size="HeadingSize.Is5"
                     Flex="Flex.Fill">
                @L["Header:ChooseAddress"]
            </Heading>
            <Div Float="Float.End" Flex="Flex.JustifyContent.End.AlignItems.Center">
                <ToolbarButton Clicked="() => AddAddressAsync()"
                               Color="Color.Secondary"
                               Icon="IconName.Add"
                               Text="@L["Action:AddAddress"]"/>
            </Div>
        </Div>
        <SelectList TItem="UserAddressSelectItemDto"
                    TValue="Guid"
                    Data="@Addresses"
                    TextField="@((item) => item.Text)"
                    ValueField="@((item) => item.Id)"
                    SelectedValue="@SelectedAddressId"
                    SelectedValueChanged="OnAddressChanged"
                    DefaultItemText=""/>
    </CardBody>
</Card>

<WmAddressNewModal @ref="WmAddressNewModalRef" OnCreated="OnAddressCreated"/>

@code {
    protected CartDto Cart { get; set; } = new();
    protected IReadOnlyList<UserAddressSelectItemDto> Addresses { get; set; } = new List<UserAddressSelectItemDto>();
    protected Guid SelectedAddressId { get; set; }
    protected WmAddressNewModal WmAddressNewModalRef { get; set; } = new();
    protected List<CreateOrderBuyerDto> Orders { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        PageHeader = L["Header:CreateOrders"];
        PageTitle = L["Page:CreateOrders"];
        
        await GetDataAsync();
        
        await base.OnInitializedAsync();
    }

    protected override Task SetBreadcrumbItemsAsync()
    {
        BreadcrumbItems = new();
        BreadcrumbItems.Add((new BreadcrumbItem(L["Menu:Cart"], "/cart")));
        BreadcrumbItems.Add((new BreadcrumbItem(L["Menu:CreateOrder"], "/order")));
        
        return base.SetBreadcrumbItemsAsync();
    }

    protected override Task SetToolBarAsync()
    {
        PageToolbar.AddButton(L["Action:CreateOrder"],
            () => CreateOrderAsync(),
            IconName.Receipt,
            Color.Primary);
        
        return base.SetToolBarAsync();
    }

    protected async Task GetDataAsync()
    {
        var cartResult = await CartAppService.GetAsync();
        Cart = cartResult;
        
        var addressResult = await UserAddressAppService.GetMySelectItemListListAsync();
        Addresses = addressResult.Items;
        
        await MapCartToOrderAsync();
    }

    protected Task MapCartToOrderAsync()
    {
        var orders = Cart.Items
            .GroupBy(item => new { item.CompanyId, item.CompanyName, item.Currency })
            .Select(group => new CreateOrderBuyerDto
            {
                CompanyId = group.Key.CompanyId,
                CompanyName = group.Key.CompanyName,
                Currency = group.Key.Currency,
                TotalPrice = group.Sum(x => x.TotalPrice),
                Items = group.Select(item => new CreateOrderItemBuyerDto
                {
                    ProductId = item.ProductId,
                    ProductName = item.ProductName,
                    Quantity = item.Quantity,
                    UnitPrice = item.UnitPrice,
                    Currency = item.Currency
                }).ToList()
            }).ToList();

        Orders = orders;
        return Task.CompletedTask;
    }


    private async Task CreateOrderAsync()
    {
        foreach (var order in Orders)
        {
            await OrderAppService.CreateAsync(order);
        }

        if (Orders.Count == 1)
        {
            UiMessageService.Success(L["Message:OrderCreatedSuccessfully"]);

        }
        else if (Orders.Count > 1)
        {
            UiMessageService.Success(L["Message:OrdersCreatedSuccessfully"]);
        }
        
        await CartAppService.ClearAsync();
        NavigationManager.NavigateTo("/");
    }

    private Task AddAddressAsync()
    {
        WmAddressNewModalRef.Show();
        return Task.CompletedTask;
    }

    private async Task OnAddressCreated(AddressDto address)
    {
        if (address == null)
        {
            return;
        }

        await UserAddressAppService.CreateMyAsync(address.Id);
        await GetDataAsync();
    }

    private Task OnAddressChanged(Guid addressId)
    {
        SelectedAddressId = addressId;
        Orders.ForEach(order => order.AddressId = addressId);
        return Task.CompletedTask;
    }   

}