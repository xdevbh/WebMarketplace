@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Volo.Abp.Application.Dtos
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.Users
@using WebMarketplace.Companies.Memberships
@using WebMarketplace.Localization
@using WebMarketplace.Users
@attribute [Authorize("AdminOnly")]
@inject IUserAdminAppService UserAppService
@inject ICompanyMembershipAdminAppService CompanyMembershipAdminAppService
@inject IStringLocalizer<WebMarketplaceResource> L
@inject AbpBlazorMessageLocalizerHelper<WebMarketplaceResource> LH

<Modal @ref="ModalRef">
    <ModalContent Centered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@ModalTitle</ModalTitle>
                <CloseButton Clicked="() => Close()"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@ValidationsRef" Model="@NewMembership" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Field:Company"]</FieldLabel>
                            <TextEdit ReadOnly="true" @bind-Text="@CompanyName"></TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["Field:User"]</FieldLabel>
                        <SelectList TItem="UserSelectItemDto"
                                    TValue="Guid"
                                    Data="@Users"
                                    TextField="@((item) => item.UserName)"
                                    ValueField="@((item) => item.Id)"
                                    @bind-SelectedValue="@SelectedUser"
                                    DefaultItemText="@L["Placeholder:SelectUser"]"/>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="Close">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateUserVendorAsync">
                    <Icon Name="IconName.Save"/>
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code {
    [Parameter] public Guid CompanyId { get; set; }
    [Parameter] public string CompanyName { get; set; }
    [Parameter] public EventCallback OnCreated { get; set; }

    protected Modal ModalRef { get; set; }
    protected CreateCompanyMembershipDto NewMembership { get; set; } = new();
    protected Validations ValidationsRef { get; set; }
    protected IReadOnlyList<UserSelectItemDto> Users { get; set; } = new List<UserSelectItemDto>();
    protected Guid SelectedUser { get; set; }
    protected string ModalTitle { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ModalTitle = @L["Modal:AdministrationCreateCompanyMembership"] + CompanyName;
        await GetDataAsync();
        await base.OnInitializedAsync();
    }

    protected async Task GetDataAsync()
    {
        var users = await UserAppService.GetSelectItemListAsync();
        Users = users.Items;
    }

    public Task Close()
    {
        ModalRef.Hide();
        return Task.CompletedTask;
    }

    public Task Show()
    {
        ModalRef.Show();
        return Task.CompletedTask;
    }

    protected async Task CreateUserVendorAsync()
    {
        if (await ValidationsRef.ValidateAll())
        {
            NewMembership.UserId = SelectedUser;
            NewMembership.CompanyId = CompanyId;
            await CompanyMembershipAdminAppService.CreateAsync(NewMembership);
            ModalRef.Hide();
            await OnCreated.InvokeAsync();
        }
    }

}