@typeparam TEnum
@using Blazorise
@using System.ComponentModel.DataAnnotations


<SelectList TItem="EnumSelectItem"
            TValue="int"
            Data="@EnumSelectItems"
            TextField="@((item) => item.Text)"
            ValueField="@((item) => item.Value)"
            @bind-SelectedValue="SelectedIntValue"
            DefaultItemHidden="true" />

@code {

    protected class EnumSelectItem
    {
        public int Value { get; set; }
        public string Text { get; set; }
    }

    [Parameter]
    public TEnum SelectedValue { get; set; }


    [Parameter] public EventCallback<TEnum> SelectedValueChanged { get; set; }


    public int SelectedIntValue
    {
        get => Convert.ToInt32(SelectedValue);
        set
        {
            var enumValue = (TEnum)Enum.ToObject(typeof(TEnum), value);
            if (!EqualityComparer<TEnum>.Default.Equals(SelectedValue, enumValue))
            {
                SelectedValue = enumValue;
                SelectedValueChanged.InvokeAsync(enumValue);
            }
        }
    }


    protected List<EnumSelectItem> EnumSelectItems => Enum.GetValues(typeof(TEnum))
        .Cast<TEnum>()
        .Select(e => new EnumSelectItem
            {
                Value = Convert.ToInt32(e),
                Text = e.ToString()
            })
        .ToList();
}
