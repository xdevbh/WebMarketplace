@using Microsoft.Extensions.Localization
@using WebMarketplace.Carts
@using WebMarketplace.Localization
@inject IStringLocalizer<WebMarketplaceResource> L
@inject ICartAppService CartAppService


<Card Margin="Margin.Is3.FromBottom">
    <CardBody>
        <Fields>
            <Field ColumnSize="ColumnSize.Is3.OnDesktop">
                <FieldLabel>@L["Field:Company"]</FieldLabel>
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel>
                            <Icon Name="IconName.Store"/>
                        </AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <TextEdit @bind-Text="@CartItem.CompanyName"
                                  ReadOnly="true"/>
                    </Addon>
                </Addons>
            </Field>
            <Field ColumnSize="ColumnSize.Is3.OnDesktop">
                <FieldLabel>@L["Field:ProductName"]</FieldLabel>
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel>
                            <Icon Name="IconName.Shapes"/>
                        </AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <TextEdit @bind-Text="@CartItem.ProductName"
                                  ReadOnly="true"/>
                    </Addon>
                </Addons>
            </Field>
            <Field ColumnSize="ColumnSize.Is2.OnDesktop">
                <FieldLabel>@L["Field:Quantity"]</FieldLabel>
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel>
                            <Icon Name="IconName.CartMinus"/>
                        </AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <NumericPicker TValue="int"
                                       Value="@CartItem.Quantity"
                                       ValueChanged="OnQuantityChanged"
                                       Min="1"
                                       ReadOnly="ReadOnly"/>
                    </Addon>
                </Addons>
            </Field>
            <Field ColumnSize="ColumnSize.Is2.OnDesktop">
                <FieldLabel>@L["Field:TotalPrice"]</FieldLabel>
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel>
                            <Icon Name="IconName.EuroSign"/>
                        </AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <NumericPicker TValue="decimal"
                                       @bind-Value="@CartItem.TotalPrice"
                                       Min="1"
                                       ReadOnly="true"/>
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <AddonLabel>
                            @CartItem.Currency
                        </AddonLabel>
                    </Addon>
                </Addons>
            </Field>
            <Field ColumnSize="ColumnSize.Is2.OnDesktop"
                   Flex="Flex.AlignItems.End.JustifyContent.Center">
                <FieldLabel></FieldLabel>
                <ToolbarButton Clicked="() => DeleteItem()"
                               Color="Color.Secondary"
                               Icon="IconName.Delete"
                               Text="@L["Action:Remove"]"
                               Disabled="ReadOnly"/>
            </Field>
        </Fields>
    </CardBody>
</Card>


@code {
    [Parameter] public CartItemDto CartItem { get; set; }
    [Parameter] public EventCallback<CartItemDto> OnItemChanged { get; set; }
    [Parameter] public bool ReadOnly { get; set; } = false;


    private async Task OnQuantityChanged(int value)
    {
        CartItem.Quantity = value;
        var input = new ChangeCartItemQuantityDto()
        {
            ProductId = CartItem.ProductId,
            Quantity = value
        };

        await CartAppService.ChangeProductQuantityAsync(input);
        await OnItemChanged.InvokeAsync(CartItem);
    }

    private async Task DeleteItem()
    {
        var input = new RemoveCartItemDto()
        {
            ProductId = CartItem.ProductId
        };
        await CartAppService.RemoveProductAsync(input);
        await OnItemChanged.InvokeAsync(CartItem);
    }

}