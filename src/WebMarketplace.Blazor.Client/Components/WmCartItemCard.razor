@using Microsoft.Extensions.Localization
@using WebMarketplace.Carts
@using WebMarketplace.Localization
@inject IStringLocalizer<WebMarketplaceResource> L
@inject ICartAppService CartAppService

<Card Margin="Margin.Is2.FromBottom">
    <CardBody>
        <Row>
            <Column Flex="Flex.Column"
                    ColumnSize="ColumnSize.Is6.OnDesktop">
                <CardTitle Size="5">
                    <CardLink To="@GetProductLink()">
                        @CartItem.ProductName
                    </CardLink >
                </CardTitle>
                <CardText>
                    @L["Field:Company"]:
                    <CardLink To="@GetCompanyLink()">
                        @CartItem.CompanyName
                    </CardLink >
                </CardText>
                <Small TextColor="TextColor.Muted">@CartItem.Quantity x @CartItem.UnitPrice @CartItem.Currency</Small>
            </Column>
            <Column Flex="Flex.JustifyContent.Center.AlignItems.Center"
                    ColumnSize="ColumnSize.Is2.OnDesktop">
                <NumericPicker TValue="int"
                               Value="@CartItem.Quantity"
                               ValueChanged="OnQuantityChanged"
                               Min="1"
                               ReadOnly="ReadOnly"/>
            </Column>
            <Column Flex="Flex.JustifyContent.End.AlignItems.Center"
                    ColumnSize="ColumnSize.Is2.OnDesktop">
                <Heading Size="HeadingSize.Is6">@CartItem.TotalPrice @CartItem.Currency</Heading>
            </Column>
            <Column Flex="Flex.JustifyContent.End.AlignItems.Center"
                    ColumnSize="ColumnSize.Is2.OnDesktop">
                <ToolbarButton Clicked="DeleteItem"
                               Color="Color.Secondary"
                               Icon="IconName.Delete"
                               Text="@L["Action:Remove"]"
                               Disabled="ReadOnly"/>
            </Column>
        </Row>
    </CardBody>
</Card>


@code {
    [Parameter] public CartItemDto CartItem { get; set; }
    [Parameter] public EventCallback<CartItemDto> OnItemChanged { get; set; }
    [Parameter] public bool ReadOnly { get; set; } = false;


    private async Task OnQuantityChanged(int value)
    {
        CartItem.Quantity = value;
        var input = new ChangeCartItemQuantityDto()
        {
            ProductId = CartItem.ProductId,
            Quantity = value
        };

        await CartAppService.ChangeProductQuantityAsync(input);
        await OnItemChanged.InvokeAsync(CartItem);
    }

    private async Task DeleteItem()
    {
        var input = new RemoveCartItemDto()
        {
            ProductId = CartItem.ProductId
        };
        await CartAppService.RemoveProductAsync(input);
        await OnItemChanged.InvokeAsync(CartItem);
    }
    
    protected string GetProductLink()
    {
        return $"/product/{CartItem.ProductId}";
    }

    private string GetCompanyLink()
    {
        return $"/company/{CartItem.CompanyId}";
    }
}