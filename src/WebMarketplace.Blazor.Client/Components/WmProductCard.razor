@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Messages
@using WebMarketplace.Carts
@using WebMarketplace.Localization
@using WebMarketplace.Products
@inject NavigationManager NavigationManager
@inject IProductBuyerAppService ProductAppService
@inject ICartAppService CartAppService
@inject IStringLocalizer<WebMarketplaceResource> L
@inject IUiMessageService UiMessageService


<Card Flex="Flex.Column"
      Width="Width.Px(300)"
      Height="Height.Px(500)">
    <CardImage Src="@ImageUrl"
               Width="Width.Is100"
               Height="Height.Px(300)"
               Style="object-fit: cover; "
               @onclick="OpenProductPage"/>
    <CardBody Flex="Flex.Column">
        <Div Flex="Flex.Column.Fill">
            <CardTitle Size="5">
                @Product.Name
            </CardTitle>
            <CardSubtitle>@RoundedPriceAmount @Product.PriceCurrency</CardSubtitle>
            <Div Flex="Flex.Row">
                <Rating @bind-SelectedValue="@RatingInt" MaxValue="5" ReadOnly="true" Color="Color.Warning"/>
                <span>(@Product.Rating)</span>
            </Div>
            <CardText Style="overflow: hidden; display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 2; ">
                @Product.ShortDescription
            </CardText>
        </Div>
        <Div Flex="Flex.ReverseRow.JustifyContent.Between">
            <WmAddToCardButton ProductId="Product.Id"/>
        </Div>
    </CardBody>
</Card>

@code {
    [Parameter] public ProductCardDto Product { get; set; }

    protected string ImageUrl { get; set; } = string.Empty;
    protected int RatingInt { get; set; }
    protected decimal RoundedPriceAmount { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        RatingInt = Convert.ToInt32(Math.Round(Product.Rating, 0));
        RoundedPriceAmount = Math.Round(Product.PriceAmount, 2);
        await SetCoverImageUrlAsync();
    }

    protected async Task SetCoverImageUrlAsync()
    {
        if (Product.ImageContent == null || Product.ImageContent.Length <= 0)
        {
            ImageUrl = "https://via.placeholder.com/300";
            return;
        }

        ImageUrl = $"data:{Product.ImageContentType};base64,{Convert.ToBase64String(Product.ImageContent)}";
    }

    protected Task OpenProductPage()
    {
        NavigationManager.NavigateTo($"/product/{Product.Id}");
        return Task.CompletedTask;
    }

}